# Raul Cervantes 77825705 and Shiori Wago 25384645. ICS 31 Lab sec 3. Lab asst 8

print('--part c1--')
from collections import namedtuple

Dish = namedtuple('Dish', 'name price calories')

def read_menu_with_count(s: str) -> list:
    '''Takes in a string naming a file and returns a list structure'''
    menu = []
    infile = open(s, 'r')
    x = infile.readlines()
    for file in x[1:]:
        food = []
        w = file.split('\t')
        name = w[0]
        price = float(w[1].strip('$'))
        calories = int(w[2])
        dish = Dish(name, price, calories)             
        menu.append(dish)
    return menu
##print(read_menu_with_count('menu2.txt'))

print()
print('--part c2--')

def read_menu(s: str) -> list:
    '''Takes in in string nameing a file and returns a list structure'''
    menu = []
    infile = open(s, 'r')
    x = infile.readlines()
    for file in x:
        food = []
        w = file.split('\t')
        name = w[0]
        price = float(w[1].strip('$'))
        calories = int(w[2])
        dish = Dish(name, price, calories)             
        menu.append(dish)
    return menu
##print(read_menu('menu3.txt'))

print()
print('--part c3--')
x = read_menu_with_count('menu1.txt')
def write_menu(d: Dish, s: str):
    ''' Writes in the Dish namedtuple into the file'''
    outfile = open(s, 'w')
    outfile.write(str(len(d)))
    outfile.write('\n')
    for line in d:
        outfile.write('{:15} ${:5.2f} {}\n'.format(line.name,line.price,line.calories))
    outfile.close()
##write_menu(x, 'test.txt')

print()
print('--part d1--')

Course = namedtuple('Course', 'dept num title instr units')
# Each field is a string except the number of units
ics31 = Course('ICS', '31', 'Intro to Programming', 'Kay', 4.0)
ics32 = Course('ICS', '32', 'Programming with Libraries', 'Thornton', 4.0)
wr39a = Course('Writing', '39A', 'Intro Composition', 'Alexander', 4.0)
wr39b = Course('Writing', '39B', 'Intermediate Composition', 'Gross', 4.0)
bio97 = Course('Biology', '97', 'Genetics', 'Smith', 4.0)
mgt1  = Course('Management', '1', 'Intro to Management', 'Jones', 2.0)
  
Student = namedtuple('Student', 'ID name level major studylist')
# All are strings except studylist, which is a list of Courses.
sW = Student('11223344', 'Anteater, Peter', 'FR', 'PSB', [ics31, wr39a, bio97, mgt1])
sX = Student('21223344', 'Anteater, Andrea', 'SO', 'CS', [ics31, wr39b, bio97, mgt1])
sY = Student('31223344', 'Programmer, Paul', 'FR', 'COG SCI', [ics32, wr39a, bio97])
sZ = Student('41223344', 'Programmer, Patsy', 'SR', 'PSB', [ics32, mgt1])

StudentBody = [sW, sX, sY, sZ]

def Students_at_level(s: 'list of Students', level: str) -> list:
    '''Takes in a list of students and a string that representst the level
    and returns a list of students that match the level.'''
    result = []
    for i in s:
        if level == i.level:
            result.append(i)
    return result
print(Students_at_level(StudentBody, 'SR'))

print()
print('--part d2--')

def Students_in_majors(s: 'list of students', m: 'list of majors') -> list:
    '''Takes in a list of students and a list of majors and returns a list of
    students that have majors on the specified list'''
    result = []
    for i in s:
        for x in m:
            if x == i.major:
                result.append(i)
    return result
print(Students_in_majors(StudentBody, ['PSB','CS']))

print()
print('--part d3--')

def Course_equals(c1: Course, c2: Course) -> bool:
    ''' Return True if the department and number of c1 match the department and
    number of c2 (and False otherwise)'''
    return(c1.dept == c2.dept and c1.num == c2.num)

def Course_on_studylist(c: Course, SL: 'list of Course') -> bool:
    ''' Return True if the course c equals any course on the list SL (where equality
    means matching department name and course number) and False otherwise.'''
    for a_course in SL:
        if Course_equals(c, a_course):
            return True
    return False

def Student_is_enrolled(S: Student, department: str, coursenum: str) -> bool:
    ''' Return True if the course (department and course number) is on the student's
    studylist (and False otherwise)'''
    return Course_on_studylist(Course(department,coursenum,'','',0),S.studylist)


def Students_in_class(Student: 'list of Students', name: str, num: str) -> list:
    '''takes a list of Students, and two stringsâ€”a department name and a course number
    and returns a list of those Students who are enrolled in the specified class'''
    result = []
    for s in Student:
        if Student_is_enrolled(s,name,num) == True:
            result.append(s)
    return result
print(Students_in_class(StudentBody,'ICS','31'))

print()
print('--part d4--')
def Student_names(Student: 'list of Students') -> list:
    '''takes a list of Students and returns a
    list of just the names of those students. '''
    result = []
    for s in Student:
        result.append(s.name)
    return result
print(Student_names(StudentBody))

print()
print('--part d5--')

#1
School_of_ICS = ['CS', 'CSE', 'BIM', 'INFX', 'CGS', 'SE', 'ICS']
print(Students_in_majors(StudentBody, School_of_ICS))
print()
#2
print(Student_names(Students_in_majors(StudentBody, School_of_ICS)))
print()
#3
print(len(Student_names(Students_in_majors(StudentBody, School_of_ICS))))
print()
#4
print(Student_names(Students_in_majors(Students_at_level(StudentBody,'SR'), School_of_ICS)))
print()
#5
print(len(Student_names(Students_in_majors(Students_at_level(StudentBody,'SR'), School_of_ICS))))
print()
#6
print(len(Student_names(Students_in_majors(Students_at_level(StudentBody,'SR'), School_of_ICS)))/len(School_of_ICS) * 100)
print()
#7
print(len(Student_names(Students_in_majors(Students_at_level(Students_in_class(StudentBody,'ICS','31'),'FR'),School_of_ICS))))
print()
#8
x = Students_in_class(Students_at_level(StudentBody,'FR'),'ICS','31')
total = 0
for s in x:
    for c in s.studylist:
        total += c.units
print(total/len(x))

    






  
        
        
        
    
    
